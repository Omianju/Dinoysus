// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    extensions = [vector]
}

model User {
    id                 String              @id @default(cuid())
    emailAddress       String              @unique
    imageUrl           String?
    firstName          String?
    lastName           String?
    credits            Int                 @default(150)
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt
    UserToProject      UserToProject[]
    questionAsked      Question[]
    StripeTransactions StripeTransaction[]
}

model Project {
    id                   String                @id @default(cuid())
    name                 String
    githubUrl            String
    createdAt            DateTime              @default(now())
    updatedAt            DateTime              @updatedAt
    deletedAt            DateTime?
    UserToProject        UserToProject[]
    Commits              Commit[]
    SourceCodeEmbeddings SourceCodeEmbedding[]
    savedQuestions       Question[]
    Meetings             Meeting[]
}

model UserToProject {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId    String
    projectId String

    User    User    @relation(fields: [userId], references: [id])
    Project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@unique([userId, projectId])
}

model Commit {
    id                 String   @id @default(cuid())
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    projectId          String
    Project            Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    commitMessage      String
    commitHash         String
    commitAuthorName   String
    commitAuthorAvatar String
    commitDate         DateTime
    summary            String // AI summary 
}

model SourceCodeEmbedding {
    id                String                 @id @default(cuid())
    summaryEmbeddings Unsupported("vector")? @map("summary_embeddings")
    sourceCode        String
    fileName          String
    summary           String
    projectId         String
    project           Project                @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@map("source_code_embedding")
}

model Question {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    question       String
    answer         String
    fileReferences Json?
    projectId      String
    project        Project @relation(fields: [projectId], references: [id])
    userId         String
    user           User    @relation(fields: [userId], references: [id])
}

model Meeting {
    id          String        @id @default(cuid())
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    name        String
    downloadUrl String // uploadthing url
    projectId   String
    project     Project       @relation(fields: [projectId], references: [id])
    status      MeetingStatus @default(PROCESSING)
    issues      Issue[]
}

enum MeetingStatus {
    PROCESSING
    COMPLETED
}

model Issue {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    start     String
    end       String
    gist      String
    headline  String
    summary   String
    meetingId String
    meeting   Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
}

model StripeTransaction {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    credits   Int
    userId    String
    user      User     @relation(fields: [userId], references: [id])
}
