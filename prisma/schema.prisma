// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    extensions = [vector]
}

model User {
    id            String          @id @default(cuid())
    emailAddress  String          @unique
    imageUrl      String?
    firstName     String?
    lastName      String?
    credits       Int             @default(150)
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    UserToProject UserToProject[]
    questionAsked      Question[]
}

model Project {
    id                   String                @id @default(cuid())
    name                 String
    githubUrl            String
    createdAt            DateTime              @default(now())
    updatedAt            DateTime              @updatedAt
    deletedAt            DateTime?
    UserToProject        UserToProject[]
    Commit               Commit[]
    SourceCodeEmbeddings SourceCodeEmbedding[]
    savedQuestion             Question[]
}

model UserToProject {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId    String
    projectId String

    User    User    @relation(fields: [userId], references: [id])
    Project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@unique([userId, projectId])
}

model Commit {
    id                 String   @id @default(cuid())
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    projectId          String
    Project            Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    commitMessage      String
    commitHash         String
    commitAuthorName   String
    commitAuthorAvatar String
    commitDate         DateTime
    summary            String // AI summary 
}

model SourceCodeEmbedding {
    id                String                 @id @default(cuid())
    summaryEmbeddings Unsupported("vector")? @map("summary_embeddings")
    sourceCode        String
    fileName          String
    summary           String
    projectId         String
    project           Project                @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@map("source_code_embedding")
}

model Question {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    question       String
    answer         String
    fileReferences Json?
    projectId      String
    project        Project @relation(fields: [projectId], references: [id])
    userId         String
    user           User    @relation(fields: [userId], references: [id])
}
